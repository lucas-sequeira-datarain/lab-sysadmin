# Run (on /assets/templates/vpc/):
#    sam build
#    sam deploy --guided --profile lab-sys.admin_mfa --capabilities CAPABILITY_NAMED_IAM

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AppVPCCidr:
    Type: String
    Default: 10.0.0.0/16
  AppStage:
    Type: String
    Default: dev
  AppInternetAccessCidr:
    Type: String
    Default: 201.92.135.240/32
  AppServerImageId:
    Description: App Server Image ID for Application base EC2 instance.
    Type: AWS::EC2::Image::Id
    Default: ami-02e8df324a09fe4a9 # Ubuntu 20 + Nginx + Python (Custom AMI)
  AppBastionHostImageId:
    Description: App Bastion Host Image ID base EC2 instance.
    Type: AWS::EC2::Image::Id
    Default: ami-03ededff12e34e59e # Amazon Linux AMI 2015.09.0
  AppBastionHostInstanceType:
    Description: Instance type to launch Baction Host EC2 instance.
    Type: String
    Default: t2.micro
    AllowedValues: [ t2.micro, t2.small ]
  AppServerInstanceType:
    Description: Instance type to launch Server EC2 instances.
    Type: String
    Default: t2.micro
    AllowedValues: [ t2.micro, t2.small ]
  AppKeyName:
    Description: Name of the SSH key pair to use for the instances.
    Type: String
    Default: lab-sysadmin
  AppSNSRecieverEmail:
    Description: Email to recieve cloudwatch alarms.
    Type: String
    Default: lucas.sequeira@datarain.com.br

# Este modelo do CloudFormation implanta uma VPC / Rede básica.
Resources:
  # VPC:
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref AppVPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "VPC" ]]

  # NACLs
  AppPublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: AppVPC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PublicNACL" ]]
  
  AppPublicNACLEntryIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref AppPublicNACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  
  AppPublicNACLEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref AppPublicNACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  
  AppPrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: AppVPC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PrivateNACL" ]]
  
  AppPrivateNACLEntryIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref AppPrivateNACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  
  AppPrivateNACLEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: !Ref AppVPCCidr
      Egress: false
      NetworkAclId: !Ref AppPrivateNACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
    
  # Internet Gateway:    
  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: AppVPC
  AppAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
     # Observe como você não pode anexar um IGW a um VPC, a menos que ambos sejam criados:
    Properties:
      VpcId: !Ref AppVPC
      InternetGatewayId: !Ref AppInternetGateway
  
  # Subnets
  AppPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PublicSubnet-A" ]]

  AppPublicSubnetAAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref AppPublicNACL
      SubnetId: !Ref AppPublicSubnetA
  
  AppPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PublicSubnet-B" ]]

  AppPublicSubnetBAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref AppPublicNACL
      SubnetId: !Ref AppPublicSubnetB
  
  AppPublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PublicSubnet-C" ]]
  
  AppPublicSubnetCAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref AppPublicNACL
      SubnetId: !Ref AppPublicSubnetC
  
  AppPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PrivateSubnet-A" ]]
  
  AppPrivateSubnetAAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref AppPrivateNACL
      SubnetId: !Ref AppPrivateSubnetA
  
  AppPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PrivateSubnet-B" ]]
  
  AppPrivateSubnetBAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref AppPrivateNACL
      SubnetId: !Ref AppPrivateSubnetB
  
  AppPrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PrivateSubnet-C" ]]
  
  AppPrivateSubnetCAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref AppPrivateNACL
      SubnetId: !Ref AppPrivateSubnetC

  # Route Tables (Public)
  AppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PublicRT" ]]
        
  AppPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AppAttachGateway
    Properties:
      RouteTableId: !Ref AppPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Rotear o tráfego através do Internet Gateway:
      GatewayId: !Ref AppInternetGateway

  # Route Tables (Private)
  AppPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "PrivateRT" ]]

  AppPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AppPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Rotear o tráfego através do NAT Gateway:
      NatGatewayId: !Ref AppNATGateway

  # A NAT Gateway:
  AppNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt AppElasticIPAddress.AllocationId
      SubnetId: !Ref AppPublicSubnetC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "NAT" ]]
        
  AppElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: AppVPC
  
  # Anexar as sub-redes públicas às tabelas de rotas públicas
  # e anexar as sub-redes privadas às tabelas de rotas privadas:     
  AppPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPublicSubnetA
      RouteTableId: !Ref AppPublicRouteTable
  AppPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPublicSubnetB
      RouteTableId: !Ref AppPublicRouteTable
  AppPublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPublicSubnetC
      RouteTableId: !Ref AppPublicRouteTable
  AppPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPrivateSubnetA
      RouteTableId: !Ref AppPrivateRouteTable
  AppPrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPrivateSubnetB
      RouteTableId: !Ref AppPrivateRouteTable
  AppPrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPrivateSubnetC
      RouteTableId: !Ref AppPrivateRouteTable

  # Security Groups
  AppBastionHostSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AppVPC
    Properties:
      GroupDescription: Allow SSH to Bastion Host (Only Lucas IP)
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - CidrIp: !Ref AppInternetAccessCidr
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "BastionHostSG" ]]

  AppLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AppVPC
    Properties:
      GroupDescription: Allow HTTP Traffic from internet
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          Description: Public HTTP Access
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "LoadBalancerSG" ]]

  AppServerSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - AppVPC
      - AppLoadBalancerSG
    Properties:
      GroupDescription: Allow All Traffic from LoadBalancerSG and Internal VPC
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AppLoadBalancerSG
          IpProtocol: -1
        - CidrIp: !Ref AppVPCCidr
          IpProtocol: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ServerSG" ]]

  AppServerBastionSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - AppVPC
      - AppBastionHostSG
    Properties:
      GroupDescription: Allow SSH from BastionHostSG
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AppBastionHostSG
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ServerBastionSG" ]]

  # EC2 Instances
  AppBastionHostEIP:
    Type: AWS::EC2::EIP
    DependsOn: 
      - AppVPC
    Properties:
      Domain: Vpc
      InstanceId: !Ref AppBastionHostInstance
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "BastionHostEIP" ]]

  AppBastionHostInstance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - AppBastionHostSG
      # - AppInstanceProfileRole
    Properties:
      ImageId: !Ref AppBastionHostImageId
      InstanceType: !Ref AppBastionHostInstanceType
      # IamInstanceProfile: !Ref AppInstanceProfileRole
      KeyName: !Ref AppKeyName
      SecurityGroupIds:
        - !Ref AppBastionHostSG
      SubnetId: !Ref AppPublicSubnetC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "BastionHostInstance" ]]
  
  AppServerInstanceA:
    Type: AWS::EC2::Instance
    DependsOn: 
      - AppServerBastionSG
      - AppServerSG
      - AppNATGateway
      # - AppInstanceProfileRole
    Properties:
      ImageId: !Ref AppServerImageId
      InstanceType: !Ref AppServerInstanceType
      # IamInstanceProfile: !Ref AppInstanceProfileRole
      KeyName: !Ref AppKeyName
      SecurityGroupIds:
        - !Ref AppServerBastionSG
        - !Ref AppServerSG
      SubnetId: !Ref AppPrivateSubnetA
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ServerInstanceA" ]]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo rm -r lab-sysadmin
          git clone https://github.com/lucas-sequeira-datarain/lab-sysadmin.git
          bash lab-sysadmin/assets/ami/install-app.sh
  
  AppServerInstanceB:
    Type: AWS::EC2::Instance
    DependsOn: 
      - AppServerBastionSG
      - AppServerSG
      - AppNATGateway
      # - AppInstanceProfileRole
    Properties:
      ImageId: !Ref AppServerImageId
      InstanceType: !Ref AppServerInstanceType
      # IamInstanceProfile: !Ref AppInstanceProfileRole
      KeyName: !Ref AppKeyName
      SecurityGroupIds:
        - !Ref AppServerBastionSG
        - !Ref AppServerSG
      SubnetId: !Ref AppPrivateSubnetB
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ServerInstanceB" ]]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo rm -r lab-sysadmin
          git clone https://github.com/lucas-sequeira-datarain/lab-sysadmin.git
          bash lab-sysadmin/assets/ami/install-app.sh
  
  # Target Group
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - AppServerInstanceA
      - AppServerInstanceB
      - AppVPC
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /health
      Protocol: HTTP
      Port: 80
      VpcId: !Ref AppVPC
      Name: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "TargetGroup" ]]
      TargetType: instance
      Targets:
        - Id: !Ref AppServerInstanceA
        - Id: !Ref AppServerInstanceB

  # Load Balancer
  AppApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - AppTargetGroup
    Properties:
      Name: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "LoadBalancer" ]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AppLoadBalancerSG
      Subnets:
        - !Ref AppPublicSubnetA
        - !Ref AppPublicSubnetB
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "LoadBalancer" ]]
  
  AppHTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn:
      - AppTargetGroup
    Properties:
      LoadBalancerArn: !Ref AppApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  # Instance Profile
  AppInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role to provide access to S3
      Policies:
        - PolicyName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "InstanceProfileInlinePolicy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'cloudformation:*'
                Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "InstanceProfileRole" ]]
  
  # SNS Topic
  AppSNSAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "SNSTopic" ]]
      Subscription:
        - Endpoint: !Ref AppSNSRecieverEmail
          Protocol: email
  
  # CloudWatch Alarms
  AppBastionHostAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - AppBastionHostInstance
    Properties:
      AlarmDescription: Alarms when instance status check fails for 10 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '10'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      Dimensions:
      - Name: InstanceId
        Value: !Ref AppBastionHostInstance
      AlarmName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "BastionHostAlarm-SystemFail" ]]
      AlarmActions:
        - !Ref AppSNSAlarmTopic
  
  AppServerAAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - AppServerInstanceA
    Properties:
      AlarmDescription: Alarms when instance status check fails for 10 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '10'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      Dimensions:
      - Name: InstanceId
        Value: !Ref AppServerInstanceA
      AlarmName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ServerInstanceAAlarm-SystemFail" ]]
      AlarmActions:
        - !Ref AppSNSAlarmTopic
  
  AppServerBAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - AppServerInstanceB
    Properties:
      AlarmDescription: Alarms when instance status check fails for 10 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '10'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      Dimensions:
      - Name: InstanceId
        Value: !Ref AppServerInstanceB
      AlarmName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ServerInstanceBAlarm-SystemFail" ]]
      AlarmActions:
        - !Ref AppSNSAlarmTopic

  # User Roles
  AppAdminRole:
    Type: AWS::IAM::Role
    DependsOn:
      - AppAdminUser
    Properties:
      MaxSessionDuration: 14400 # 4 hours
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Join ['/', [!Sub "arn:aws:iam::${AWS::AccountId}:user" , !Ref AppAdminUser]]
            Action:
              - 'sts:AssumeRole'
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: true
      Description: Role to provide admin access
      Policies:
        - PolicyName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "AdminRoleInlinePolicy" ]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'cloudformation:*'
                Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      RoleName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "AdminRole" ]]
  
  AppComumRole:
    Type: AWS::IAM::Role
    DependsOn:
      - AppAdminUser
      - AppComumUser
    Properties:
      MaxSessionDuration: 14400 # 4 hours
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Join ['/', [!Sub "arn:aws:iam::${AWS::AccountId}:user" , !Ref AppAdminUser]]
                - !Join ['/', [!Sub "arn:aws:iam::${AWS::AccountId}:user" , !Ref AppComumUser]]
            Action:
              - 'sts:AssumeRole'
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: true
      Description: Role to provide comum access
      RoleName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ComumRole" ]]

  # User Policies
  AppVpcPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - AppComumRole
    Properties:
      Roles:
        - !Ref AppComumRole
      PolicyName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "VPCInlinePolicy" ]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: UseVpcConsole
          Effect: Allow
          Action:
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeClassicLinkInstances
          - ec2:DescribeClientVpnEndpoints
          - ec2:DescribeCustomerGateways
          - ec2:DescribeDhcpOptions
          - ec2:DescribeEgressOnlyInternetGateways
          - ec2:DescribeFlowLogs
          - ec2:DescribeInternetGateways
          - ec2:DescribeManagedPrefixLists
          - ec2:DescribeMovingAddresses
          - ec2:DescribeNatGateways
          - ec2:DescribeNetworkAcls
          - ec2:DescribeNetworkInterfaceAttribute
          - ec2:DescribeNetworkInterfacePermissions
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribePrefixLists
          - ec2:DescribeRouteTables
          - ec2:DescribeSecurityGroupReferences
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSecurityGroupRules
          - ec2:DescribeStaleSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeTrafficMirrorFilters
          - ec2:DescribeTrafficMirrorSessions
          - ec2:DescribeTrafficMirrorTargets
          - ec2:DescribeTransitGateways
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTransitGatewayRouteTables
          - ec2:DescribeVpcAttribute
          - ec2:DescribeVpcClassicLink
          - ec2:DescribeVpcClassicLinkDnsSupport
          - ec2:DescribeVpcEndpoints
          - ec2:DescribeVpcEndpointConnectionNotifications
          - ec2:DescribeVpcEndpointConnections
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServices
          - ec2:DescribeVpcPeeringConnections
          - ec2:DescribeVpcs
          - ec2:DescribeVpnConnections
          - ec2:DescribeVpnGateways
          - ec2:GetManagedPrefixListAssociations
          - ec2:GetManagedPrefixListEntries
          Resource: "*"
        - Sid: CreateVpcWithPublicSubnet
          Effect: Allow
          Action:
          - ec2:CreateVpc
          - ec2:CreateSubnet
          - ec2:DescribeAvailabilityZones
          - ec2:CreateRouteTable
          - ec2:CreateRoute
          - ec2:CreateInternetGateway
          - ec2:AttachInternetGateway
          - ec2:AssociateRouteTable
          - ec2:ModifyVpcAttribute
          Resource: "*"
        - Sid: ModifyDeleteVpcResourcesIGW
          Effect: Allow
          Action: ec2:DeleteInternetGateway
          Resource: arn:aws:ec2:*:*:internet-gateway/*
          Condition:
            StringEquals:
              ec2:ResourceTag/author: lsequeira
        - Sid: ModifyDeleteVpcResourcesRT
          Effect: Allow
          Action:
          - ec2:DeleteRouteTable
          - ec2:CreateRoute
          - ec2:ReplaceRoute
          - ec2:DeleteRoute
          Resource: arn:aws:ec2:*:*:route-table/*
          Condition:
            StringEquals:
              ec2:ResourceTag/author: lsequeira
        - Sid: ManageSecurityGroupsDescribeSG
          Effect: Allow
          Action:
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSecurityGroupRules
          - ec2:DescribeVpcs
          Resource: "*"
        - Sid: ManageSecurityGroupsManageSG
          Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:RevokeSecurityGroupIngress
          - ec2:UpdateSecurityGroupRuleDescriptionsIngress
          - ec2:AuthorizeSecurityGroupEgress
          - ec2:RevokeSecurityGroupEgress
          - ec2:UpdateSecurityGroupRuleDescriptionsEgress
          - ec2:ModifySecurityGroupRules
          - ec2:DeleteSecurityGroup
          Resource: arn:aws:ec2:*:*:security-group/*
          Condition:
            StringEquals:
              ec2:ResourceTag/author: lsequeira
        - Sid: ManageSecurityGroupsCreateSG
          Effect: Allow
          Action:
          - ec2:CreateSecurityGroup
          Resource: arn:aws:ec2:*:*:security-group/*
          Condition:
            StringEquals:
              aws:RequestTag/author: lsequeira
            ForAllValues:StringEquals:
              aws:TagKeys:
              - lsequeira
        - Sid: ManageSecurityGroupsCreateTags
          Effect: Allow
          Action:
          - ec2:CreateTags
          Resource: arn:aws:ec2:*:*:security-group/*
          Condition:
            StringEquals:
              ec2:CreateAction: CreateSecurityGroup
        - Sid: ManageSecurityGroupRules
          Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:RevokeSecurityGroupIngress
          - ec2:UpdateSecurityGroupRuleDescriptionsIngress
          - ec2:AuthorizeSecurityGroupEgress
          - ec2:RevokeSecurityGroupEgress
          - ec2:UpdateSecurityGroupRuleDescriptionsEgress
          - ec2:ModifySecurityGroupRules
          Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
          Condition:
            ArnEquals:
              ec2:Vpc: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/vpc-id
        - Effect: Allow
          Action:
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSecurityGroupRules
          - ec2:DescribeTags
          Resource: "*"

  AppSNSPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - AppComumRole
    Properties:
      Roles:
        - !Ref AppComumRole
      PolicyName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "SNSInlinePolicy" ]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: SNSReadOnly
          Effect: Allow
          Action:
          - sns:Get*
          - sns:List*
          Resource: "*"
        - Sid: SNSManageTopic
          Effect: Allow
          Action:
          - kms:DescribeKey
          - sns:TagResource
          - sns:UntagResource
          - sns:CreateTopic
          - sns:Publish
          - sns:Subscribe
          - sns:Unsubscribe
          - sns:ConfirmSubscription
          - sns:DeleteTopic
          Resource: "*"
  
  AppEC2Policy:
    Type: AWS::IAM::Policy
    DependsOn:
      - AppComumRole
    Properties:
      Roles:
        - !Ref AppComumRole
      PolicyName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "EC2InlinePolicy" ]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ActionsRequiredtoRunDeleteVolumes
          Effect: Allow
          Action:
          - ec2:DeleteVolume
          - ec2:DeleteSnapshot
          Resource: "*"
          Condition:
            StringEqualsIfExists:
              ec2:InstanceType: t2.micro
        - Sid: ActionsRequiredtoRunStopDeleteInstancesInVPC
          Effect: Allow
          Action:
          - ec2:TerminateInstances
          - ec2:RunInstances
          - ec2:StopInstances
          - ec2:StartInstances
          Resource: "*"
          Condition:
            StringEqualsIfExists:
              ec2:InstanceType: t2.micro
        - Sid: SecurityAccess
          Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CreateKeyPair
          Resource: "*"
        - Sid: EC2Tagging
          Effect: Allow
          Action:
          - ec2:CreateTags
          - ec2:DeleteTags
          Resource: "*"
        - Sid: ReadOnlyAccess
          Effect: Allow
          Action:
          - ec2:Describe*
          - ec2:GetConsole*
          - iam:ListInstanceProfiles
          - compute-optimizer:GetEnrollmentStatus
          Resource: "*"
        - Sid: CloudWatchLogs
          Effect: Allow
          Action:
          - cloudwatch:DescribeAlarms
          - cloudwatch:GetMetricStatistics
          - cloudwatch:PutMetricAlarm
          - cloudwatch:ListDashboards
          - cloudwatch:*Dashboard*
          - cloudwatch:GetMetricData
          Resource: "*"

  AppMFAPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - AppComumUser
      - AppAdminUser
    Properties:
      PolicyName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "MFAInlinePolicy" ]]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowViewAccountInfo
          Effect: Allow
          Action: iam:ListVirtualMFADevices
          Resource: "*"
        - Sid: AllowManageOwnVirtualMFADevice
          Effect: Allow
          Action:
          - iam:CreateVirtualMFADevice
          - iam:DeleteVirtualMFADevice
          Resource: arn:aws:iam::*:mfa/${aws:username}
        - Sid: AllowManageOwnUserMFA
          Effect: Allow
          Action:
          - iam:DeactivateMFADevice
          - iam:EnableMFADevice
          - iam:GetUser
          - iam:ListMFADevices
          - iam:ResyncMFADevice
          Resource: arn:aws:iam::*:user/${aws:username}
      Users:
        - !Ref AppComumUser
        - !Ref AppAdminUser

  # Users
  AppAdminUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "AdminUser" ]]
      LoginProfile:
        Password: D@tarain2022
        PasswordResetRequired: true
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMUserChangePassword
  
  AppComumUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Join ['-', [!Ref "AWS::StackName" , !Ref AppStage, "ComumUser" ]]
      LoginProfile:
        Password: D@tarain2022
        PasswordResetRequired: true
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMUserChangePassword

Outputs:
  AppBastionHostInstance:
    Value: !Sub https://console.aws.amazon.com/ec2/home?region=${AWS::Region}#InstanceDetails:instanceId=${AppBastionHostInstance}
    Description: Bastion Host Instance
  AppBastionHostInstancePublicIP:
    Value: !Sub ${AppBastionHostEIP}
    Description: Bastion Host Public IP
  AppServerInstanceA:
    Value: !Sub https://console.aws.amazon.com/ec2/home?region=${AWS::Region}#InstanceDetails:instanceId=${AppServerInstanceA}
    Description: Server A Instance
  AppServerInstanceAPrivateIP:
    Value: !GetAtt AppServerInstanceA.PrivateIp
    Description: Server A Private IP
  AppServerInstanceB:
    Value: !Sub https://console.aws.amazon.com/ec2/home?region=${AWS::Region}#InstanceDetails:instanceId=${AppServerInstanceB}
    Description: Server B Instance
  AppServerInstanceBPrivateIP:
    Value: !GetAtt AppServerInstanceB.PrivateIp
    Description: Server B Private IP
  AppApplicationLoadBalancerDNSName:
    Value: !GetAtt AppApplicationLoadBalancer.DNSName
    Description: Application Load Balancer DNS Name
  AppVPC:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#VpcDetails:VpcId=${AppVPC}
    Description: VPC For Application
  AppBastionHostSG:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SecurityGroup:groupId=${AppBastionHostSG}
    Description: Bastion Host Security Group
  AppServerSG:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SecurityGroup:groupId=${AppServerSG}
    Description: Server Security Group
  AppServerBastionSG:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SecurityGroup:groupId=${AppServerBastionSG}
    Description: Bastion Host Access to Server Security Group
  AppLoadBalancerSG:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SecurityGroup:groupId=${AppLoadBalancerSG}
    Description: Load Balancer Security Group
  AppPublicRouteTable:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#RouteTableDetails:RouteTableId=${AppPublicRouteTable}
    Description: Public Route Table
  AppPrivateRouteTable:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#RouteTableDetails:RouteTableId=${AppPrivateRouteTable}
    Description: Private Route Table
  AppPublicNACL:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#NetworkAclDetails:networkAclId=${AppPublicNACL}
    Description: Public Network ACL
  AppPrivateNACL:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#NetworkAclDetails:networkAclId=${AppPrivateNACL}
    Description: Private Network ACL
  AppPublicSubnetA:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SubnetDetails:subnetId=${AppPublicSubnetA}
    Description: Public Subnet A
  AppPublicSubnetB:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SubnetDetails:subnetId=${AppPublicSubnetB}
    Description: Public Subnet B
  AppPublicSubnetC:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SubnetDetails:subnetId=${AppPublicSubnetC}
    Description: Public Subnet C
  AppPrivateSubnetA:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SubnetDetails:subnetId=${AppPrivateSubnetA}
    Description: Private Subnet A
  AppPrivateSubnetB:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SubnetDetails:subnetId=${AppPrivateSubnetB}
    Description: Private Subnet B
  AppPrivateSubnetC:
    Value: !Sub https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#SubnetDetails:subnetId=${AppPrivateSubnetC}
    Description: Private Subnet C
  AppAdminUser:
    Value: !Sub https://console.aws.amazon.com/iam/home#/users/${AppAdminUser}
    Description: Admin User
  AppComumUser:
    Value: !Sub https://console.aws.amazon.com/iam/home#/users/${AppComumUser}
    Description: Comum User
  AppAdminRole:
    Value: !Sub https://console.aws.amazon.com/iamv2/home#/roles/details/${AppAdminRole}
    Description: Admin Role
  AppComumRole:
    Value: !Sub https://console.aws.amazon.com/iamv2/home#/roles/details/${AppComumRole}
    Description: Comum Role
  AppBastionHostAlarm:
    Value: !Sub https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:alarm/${AppBastionHostAlarm}?
    Description: Bastion Host Fail Alarm
  AppServerAAlarm:
    Value: !Sub https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:alarm/${AppServerAAlarm}?
    Description: Server A Fail Alarm
  AppServerBAlarm:
    Value: !Sub https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#alarmsV2:alarm/${AppServerBAlarm}?
    Description: Server B Fail Alarm
  AppSNSAlarmTopic:
    Value: !Sub https://console.aws.amazon.com/sns/v3/home?region=${AWS::Region}#/topic/arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AppSNSAlarmTopic}
    Description: SNS Alarm Topic 
